# Generated documentation for module arcpy.aviation


class GenerateOISObstacleData(object):
    """
    Generates a JSON string that is stored in the OBSTACLEJSON field on the input Obstruction Identification Surface (OIS) multipatch feature class. This class contains the data necessary to depict obstacles to flight safety within the approach surfaces (in the form of points, lines, or polygons) in the Terrain and Obstacle Profile layout element.
    """

    @property
    def description(self) -> str:
        return """

        GenerateOISObstacleData_aviation(in_runway_features, {in_dems;in_dems...}, in_obstacle_features, target_ois_features, {obstacle_height_field}, {obstacle_height_unit}, {in_flightpath_features}, {label_field}, {height_option}, {elevation_option}, {elevation_field}, {elevation_field_unit}, {obstacle_output_method}, {shadow_horizontal_distance}, {shadow_slope})

        Generates a JSON string that is stored in the OBSTACLEJSON field on
        the input Obstruction Identification Surface (OIS) multipatch feature
        class. This class contains the data necessary to depict obstacles to
        flight safety within the approach surfaces (in the form of points,
        lines, or polygons) in the Terrain and Obstacle Profile layout
        element.

     INPUTS:
      in_runway_features (Feature Layer):
          The input runway dataset. The feature class must be z-enabled and
          contain polylines.
      in_dems {Raster Layer}:
          The DEMs covering the obstacles that will be used to derive base
          elevation values. This parameter is used if elevation_option is set to
          ELEVATION_DEM.
      in_obstacle_features (Feature Layer):
          The input obstacle features that will be analyzed. The feature class
          must be z-enabled.
      target_ois_features (Feature Layer):
          The multipatch features with defined airport data model schema. The
          feature class must be z-enabled.
      obstacle_height_field {String}:
          Specifies the field that will contain the height of the obstacle
          features or the keyword FEATURE_GEOMETRY to indicate obstacle feature
          geometry z-coordinate values.FEATURE_GEOMETRY-The field that will
          contain the height of the
          obstacle features.
      obstacle_height_unit {String}:
          Specifies the obstacle height unit of measure that will be
          used.KILOMETERS-The unit will be kilometers.METERS-The unit will be
          meters.DECIMETERS-The unit will be decimeters.CENTIMETERS-The unit
          will be centimeters.MILLIMETERS-The unit will be
          millimeters.NAUTICAL_MILES-The unit will be nautical miles.MILES-The
          unit will be miles.YARDS-The unit will be yards.FEET-The unit will be
          feet.INCHES-The unit will be inchesDECIMAL_DEGREES-The unit will be
          decimal degrees.POINTS-The unit will be points.UNKNOWN-The unit will
          be unknown.
      in_flightpath_features {Feature Layer}:
          The polyline features that will define curved approaches to the
          specified runways. If no features are provided, all input features
          will be processed as straight approaches.
      label_field {String}:
          A field from the input obstacle feature class that will be used to
          label the obstacle. When an obstacle JSON generated by this tool is
          later used to create a Terrain and Obstacle Profile element in a
          layout, the data from the field provided will be used to label the
          input point obstacles in that element. This parameter only
          applies when theparameter values contain
          point features. Input Obstacle Features         If no field is
          provided, thefield will be applied by default.
          ObjectID
      height_option {String}:
          Specifies how obstacle height values will be measured.ABSOLUTE_HEIGHT-
          Obstacle heights will be measured from sea
          level.RELATIVE_HEIGHT-Obstacle heights will be measured from ground
          level.
          This is the default.
      elevation_option {String}:
          Specifies how obstacle base elevation heights will be
          found.ELEVATION_FIELD-Base elevation heights will be found in a
          numeric
          field of the obstacle feature class.ELEVATION_DEM-Base elevation
          heights will be found by deriving them
          from one or more DEMs. This is the default.
      elevation_field {String}:
          The field that will contain base elevation heights of the obstacle
          features.This parameter is used if elevation_option is set to
          ELEVATION_FIELD.
          The default is the first numeric field in the obstacle feature class.
      elevation_field_unit {String}:
          Specifies the linear unit that will be used for the base elevation
          values. This parameter is used if elevation_option is set to
          ELEVATION_FIELD.KILOMETERS-The unit will be kilometers.METERS-The unit
          will be meters.
          This is the default.DECIMETERS-The unit will be
          decimeters.CENTIMETERS-The unit will be centimeters.MILLIMETERS-The
          unit will be millimeters.NAUTICAL_MILES-The unit will be nautical
          miles.MILES-The unit will be miles.YARDS-The unit will be
          yards.FEET-The unit will be feet.INCHES-The unit will be
          inchesDECIMAL_DEGREES-The unit will be decimal degrees.POINTS-The unit
          will be points.UNKNOWN-The unit will be unknown.
      obstacle_output_method {String}:
          Specifies the obstacles that will be included in the output feature
          class.ALL_OBSTACLES-All obstacles within the extent of the OIS will be
          included in the output.PENETRATING_OBSTACLES-Only obstacles that
          penetrate the OIS will be
          included in the output.SHADOWING_OBSTACLES-Only obstacles that shadow
          other obstacles will be
          included in the output.
      shadow_horizontal_distance {Double}:
          The length of the approach surface in meters (calculated from the
          runway end) where shadows are considered horizontally aligned.
      shadow_slope {Double}:
          The slope of the shadow that will be considered past the
          shadow_horizontal_distance parameter value.

        """